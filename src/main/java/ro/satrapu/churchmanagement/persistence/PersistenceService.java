/*
 * Copyright 2014 satrapu.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ro.satrapu.churchmanagement.persistence;

import org.slf4j.Logger;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Manages all CRUD application operations.
 * It must be serializable since it may be injected into beans of passivating scope.
 *
 * @author satrapu
 */
@Stateless
public class PersistenceService implements Serializable {
    private static final long serialVersionUID = 1L;
    private EntityManager entityManager;
    private Logger logger;


    /**
     * This default constructor is required in order to support the one annotated with @Inject - see more details
     * <a href="http://stackoverflow.com/a/9192342">here</a>.
     */
    public PersistenceService() {
    }

    /**
     * Creates a new instance of the {@link PersistenceService} class.
     *
     * @param entityManager Manages entity persistence.
     * @param logger        Logs all messages generated by the instances of this class.
     */
    @Inject
    @Valid
    public PersistenceService(@NotNull @ChurchManagementDatabase EntityManager entityManager,
                              @NotNull Logger logger) {
        this();
        this.entityManager = entityManager;
        this.logger = logger;
    }

    @Valid
    public <T extends Serializable> T persist(@NotNull T entity) {
        logger.info("Persisting entity of class: {} ...", entity.getClass().getName());
        entityManager.persist(entity);

        if (logger.isInfoEnabled()) {
            logger.info("Entity of class: {} with id: {} was persisted", entity.getClass().getName(), getEntityIdentifier(entity));
        }

        return entity;
    }

    @Valid
    public <T extends Serializable> List<T> persist(@NotNull List<T> entities) {
        int entityCount = entities.size();

        if (entityCount == 0) {
            logger.info("Entity list is empty, there is nothing to persist");
            return Collections.emptyList();
        }

        logger.info("Persisting {} entities ...", entityCount);
        List<T> persistedEntities = new ArrayList<>(entityCount);

        for (T entity : entities) {
            T persistedEntity = persist(entity);
            persistedEntities.add(persistedEntity);
        }

        logger.info("A number of {} entities have been persisted", entityCount);
        return persistedEntities;
    }

    @Valid
    public <T extends Serializable> void remove(@NotNull T entity) {
        boolean isInfoEnabled = logger.isInfoEnabled();
        Object entityId = null;

        if (isInfoEnabled) {
            entityId = getEntityIdentifier(entity);
            logger.info("Removing entity of class: {} with id: {}", entity.getClass().getName(), entityId);
        }

        T mergedEntity = entityManager.merge(entity);
        entityManager.remove(mergedEntity);
        logger.info("Entity of class: {} with id: {} was removed", entity.getClass().getName(), entityId);
    }

    @Valid
    public <T extends Serializable> T merge(@NotNull T entity) {
        boolean isInfoEnabled = logger.isInfoEnabled();
        Object entityId = null;

        if (isInfoEnabled) {
            entityId = getEntityIdentifier(entity);
            logger.info("Merging entity of class: {} with id: {} ...", entity.getClass().getName(), entityId);
        }

        T mergedEntity = entityManager.merge(entity);
        logger.info("Entity of class: {} with id: {} was merged", entity.getClass().getName(), entityId);

        return mergedEntity;
    }
    
    @Valid
    public <T extends Serializable> T fetch(@NotNull Class<T> entityClass, @NotNull Object entityId) {
        logger.info("Fetching entity of class: {} using id: {} ...", entityClass.getName(), entityId);
        T entity = entityManager.find(entityClass, entityId);
        logger.info("Entity of class: {} and id: {} {} fetched", entityClass.getName(), entityId, entity == null ? "was not" : "was");

        return entity;
    }

    @Valid
    public <T> QuerySearchResult<T> fetch(@NotNull Query<T> entityQuery, @Min(0) Integer firstResult, @Min(1) Integer maxResults) {
        logger.info("Fetching entities using query of class: {}, first result: {} and max results: {} ...",
                entityQuery.getClass().getName(), firstResult, maxResults);
        QuerySearchResult<T> result = entityQuery.getSearchResult(entityManager, firstResult, maxResults);

        if (logger.isInfoEnabled()) {
            int entityCount = 0;

            if (result != null) {
                List<T> records = result.getRecords();

                if (records != null) {
                    entityCount = records.size();
                }
            }

            logger.info("Fetched {} entities", entityCount);
        }

        return result;
    }

    @Valid
    public long count(@NotNull CountQuery countQuery) {
        logger.info("Counting entities using query of class: {} ...", countQuery.getClass().getName());
        long result = countQuery.getTotalRecords(entityManager);
        logger.info("Counted {} entities", result);

        return result;
    }

    private <T extends Serializable> Object getEntityIdentifier(T entity) {
        return entityManager.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(entity);
    }
}
