package ro.satrapu.churchmanagement.persistence;

import io.codearte.jfairy.Fairy;
import org.slf4j.Logger;

import javax.annotation.PostConstruct;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * Initializes the underlying database with a number of entities.
 */
@Startup
@Singleton
public class ChurchManagementDatabaseInitializer {
    /**
     * The magic number {@value ChurchManagementDatabaseInitializer#MAX_AMOUNT_OF_PERSONS_TO_GENERATE} has been picked
     * in order to have several pages of entities available inside the person search page.
     */
    private static final int MAX_AMOUNT_OF_PERSONS_TO_GENERATE = 117;
    private PersistenceService persistenceService;
    private Logger logger;

    /**
     * This default constructor is required in order to support the one annotated with @Inject - see more details
     * <a href="http://stackoverflow.com/a/9192342">here</a>.
     */
    public ChurchManagementDatabaseInitializer() {
    }

    /**
     * Creates a new instance of the {@link ChurchManagementDatabaseInitializer} class.
     *
     * @param persistenceService Manages entity persistence.
     * @param logger             Logs all messages generated by the instances of this class.
     */
    @Inject
    @Valid
    public ChurchManagementDatabaseInitializer(@NotNull PersistenceService persistenceService,
                                               @NotNull Logger logger) {
        this();
        this.persistenceService = persistenceService;
        this.logger = logger;
    }

    @PostConstruct
    public void initializeDatabase() {
        Fairy fairy = Fairy.create();
        generatePersons(fairy, MAX_AMOUNT_OF_PERSONS_TO_GENERATE);
    }

    private void generatePersons(Fairy fairy, int maxAmount) {
        logger.info("Generating {} instances of class: {} ...", maxAmount, Person.class.getCanonicalName());

        List<DiscipleshipStatus> discipleshipStatuses = Collections.unmodifiableList(Arrays.asList(DiscipleshipStatus.values()));
        List<Person> persons = new ArrayList<>();
        int limit = discipleshipStatuses.size();
        Random random = new Random();

        for (int i = 0; i < maxAmount; i++) {
            io.codearte.jfairy.producer.person.Person generatedPerson = fairy.person();

            Person person = new Person();
            person.setDiscipleshipStatus(discipleshipStatuses.get(random.nextInt(limit) % limit));
            person.setFirstName(generatedPerson.firstName());
            person.setMiddleName(generatedPerson.middleName());
            person.setLastName(generatedPerson.lastName());
            person.setEmailAddress(generatedPerson.companyEmail());

            persons.add(person);
        }

        persistenceService.persist(persons);
        logger.info("A number of {} instances of class: {} have been generated", maxAmount, Person.class.getCanonicalName());
    }
}
